#!/usr/bin/python
# -*- mode: Python; tab-width: 4; indent-tabs-mode: nil; -*-
# ex: set tabstop=4 :
# Please do not change the two lines above. See PEP 8, PEP 263.
#

import sys
import os
import shutil
from optparse import OptionError
from osprov.optparse_ext import OptionParser
from osprov.scripts import bootmode
from osprov.osbp import logger
from osprov.util import process
from osprov.decorators import HandleShowErrorMessage
from osprov import diskmgr
from osprov.diskmgr import const, disk, diskmanager, partition
from osprov.server import ThisLocalServer
from osprov.errors import ProcessExecutionError

LOG = logger.getIt("windows_image_deploy")


class WindowsImageDeployOptionParser(OptionParser):

    """ Option parser for this step """

    def defineOptions(self):
        self.add_option("--bootMode", type="string",
                        help="boot mode of the server, can be UEFI or Legacy")
        self.add_option("--systemDiskNumber", type="int", default=0,
                        help="system disk number where Windows will be deployed (default disk number is '0').")
        self.add_option("--systemPartitionLabel", type="string", default="System",
                        help="label of partition where Windows will be deployed")
        self.add_option("--wimFilePath", type="string",
                        help="path where to get WIM file")

    def validateArgs(self, opt, args):
        if opt.bootMode and not opt.bootMode.lower() in [x.lower() for x in bootmode.SUPPORTED_BOOT_MODES]:
            raise OptionError("Invalid boot mode: " + opt.bootMode, "bootMode")
        if not opt.wimFilePath:
            raise OptionError("Missing parameter: --wimFilePath", "wimFilePath")


def deployPartition(driveLetter, wimFilePath, log=LOG):
    process.runIt("imagex /check /verify /apply \"%s\" 1 %s:\\" %
                  (wimFilePath, driveLetter), checkExitCode=(0,), log=log)

def runAndIgnoreResult(cmdLine, log=LOG):
    try:
        process.runIt(cmdLine, checkExitCode=(0,1), log=log)
    except ProcessExecutionError:
        pass

def updateBCDForLegacy(windowsDriveLetter, log=LOG):
    bcdbootPath = windowsDriveLetter + ":\\Windows\\System32\\bcdboot.exe"
    if os.path.isfile(bcdbootPath):
        shutil.copyfile(bcdbootPath, "\\Windows\\Temp\\bcdboot.exe")
        updateBcdLine = "\\Windows\\Temp\\bcdboot.exe %s:\\Windows /s %s:" % (windowsDriveLetter, windowsDriveLetter)
        try:
            process.runIt(updateBcdLine, checkExitCode=(0,), log=log)
            runAndIgnoreResult(updateBcdLine+" /f BIOS", log=log)
            return
        except ProcessExecutionError:
            print "OS bcdboot failed to run, will retry using the WinPE bcdboot"
            pass

    updateBcdLine = "bcdboot.exe %s:\\Windows /s %s:" % (windowsDriveLetter, windowsDriveLetter)
    process.runIt(updateBcdLine, checkExitCode=(0,), log=log)
    runAndIgnoreResult(updateBcdLine+" /f BIOS", log=log)

def updateBCDForUefi(espDriveLetter, windowsDriveLetter, log=LOG):
    process.runIt("bcdedit /set {bootmgr} device partition=%s:" %
                  espDriveLetter, checkExitCode=(0,), log=log)
    process.runIt("bcdedit /set {memdiag} device partition=%s:" %
                  espDriveLetter, checkExitCode=(0,), log=log)
    process.runIt("bcdedit /set {default} device partition=%s:" %
                  windowsDriveLetter, checkExitCode=(0,), log=log)
    process.runIt("bcdedit /set {default} osdevice partition=%s:" %
                  windowsDriveLetter, checkExitCode=(0,), log=log)
    process.runIt(
        "bcdedit /set {FWbootmgr} displayorder {Bootmgr} /addfirst", checkExitCode=(0,), log=log)

@HandleShowErrorMessage("Windows Image Deploy", LOG)
def main():

    # get and parse arguments
    options, remainingArgs = WindowsImageDeployOptionParser().parse_args()
    wimFilePath = options.wimFilePath.strip()
    systemDiskNumber = options.systemDiskNumber
    # get bootmode (legacy bios or uefi)
    if options.bootMode:
        bootMode = options.bootMode
    else:
        bootMode = bootmode.getCurrentBootMode(ThisLocalServer(), log=LOG)

    windowsDriveLetter = disk.WindowsDisk(systemDiskNumber).getPartitionWithLabel(
        options.systemPartitionLabel).letter

    partitionTable = diskmgr.getPartitionTable(bootMode)
    if const.PARTITION_TABLE_MBR == partitionTable:
        print "Deploy Windows Image based on Legacy Windows Partitioning Schema"
        deployPartition(windowsDriveLetter, wimFilePath)
        updateBCDForLegacy(windowsDriveLetter)

    elif const.PARTITION_TABLE_GPT == partitionTable:
        print "Deploy Windows Image based on Uefi Windows Partitioning Schema"
        freeLetter = diskmanager.WindowsDiskManager().findFirstAvailableDriveLetter()
        partition.WindowsPartition(systemDiskNumber, 1).setPartitionLetter(freeLetter)
        deployPartition(freeLetter, wimFilePath + "_ESP")
        deployPartition(windowsDriveLetter, wimFilePath)
        updateBCDForUefi(freeLetter, windowsDriveLetter)

if __name__ == "__main__":
    sys.exit(main())
