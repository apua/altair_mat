#!/usr/bin/python

############################################################################################
# (c) Copyright 2013 Hewlett-Packard Development Company, L.P.
#
# This script performs the following steps:
#
# 1. Gets the list of logical disks using "win32com". Network drives and WinPE (drive "X:")
#    are not included in the list because they must not be remapped.
# 2. Since the VID drives show up with an interface type of "USB", they are moved to the
#    end of the list, so that they are mapped last when the new drive letters are assigned.
# 3. Unmaps the logical disks from their associated drive letter.
# 4. Maps the local disks to a drive letter, starting with the letter "C", in the same
#    order in which they were found.  If the drive letter is being used by a network drive,
#    or the drive letter is in the "--reservedDriveLetters" parameter, then the next letter
#    will by tried, and so on.
#
############################################################################################

import subprocess
from subprocess import Popen, PIPE, STDOUT

import sys
import re
import win32com.client 

from osprov.osbp import logger
from osprov.errors import ShowErrorMessage
from optparse import OptionParser

DRIVE_TYPE_UNKNOWN = 0
DRIVE_TYPE_NO_ROOT_DIRECTORY = 1
DRIVE_TYPE_REMOVABLE_DISK = 2
DRIVE_TYPE_LOCAL_DISK = 3
DRIVE_TYPE_NETWORK_DRIVE = 4
DRIVE_TYPE_COMPACT_DISC = 5
DRIVE_TYPE_RAM_DISK = 6

LOG = logger.getIt('remap_windows_drives')

############################################################################################
# Class to parse command line arguments.
############################################################################################

class CustomParser(OptionParser):
	""" a custom parser """
	def __init__(self, *args, **kwargs):
		OptionParser.__init__(self, *args, **kwargs)
		self.add_option("--reservedDriveLetters",
				help="A space-separated list of drive letters that should not be used when remapping the drives")

############################################################################################
# A disk class to hold some basic information about the disks.
############################################################################################

class MyDisk:
	def __init__(self):
		self.volumeName = None
		self.driveLetter = None
		self.label = None
		self.driveType = DRIVE_TYPE_UNKNOWN
		self.serialNum = None
		self.interfaceType = None
		self.size = None
	
	def setVolumeName(self, volumeName):
		self.volumeName = volumeName

	def setDriveLetter(self, driveLetter):
		self.driveLetter = driveLetter

	def setLabel(self, label):
		self.label = label

	def setDriveType(self, driveType):
		self.driveType = driveType

	def setSerialNum(self, serialNum):
		self.serialNum = serialNum

	def setInterfaceType(self, interfaceType):
		self.interfaceType = interfaceType

	def setSize(self, size):
		self.size = size

	def getVolumeName(self):
		return self.volumeName

	def getDriveLetter(self):
		return self.driveLetter

	def getLabel(self):
		return self.label

	def getDriveType(self):
		return self.driveType

	def getSerialNum(self):
		return self.serialNum

	def getInterfaceType(self):
		return self.interfaceType

	def getSize(self):
		return self.size

############################################################################################
# Returns a different sequential drive letter each time its called, starting with "C".
############################################################################################

def getNextDriveLetter():
	if not hasattr(getNextDriveLetter, "letter"):
		getNextDriveLetter.letter = 'C'  # it doesn't exist yet, so initialize it
	elif (getNextDriveLetter.letter is not None):
		if (getNextDriveLetter.letter == 'Z'):
			getNextDriveLetter.letter = None
		else:
			getNextDriveLetter.letter = chr(ord(getNextDriveLetter.letter)+1)

	return getNextDriveLetter.letter

############################################################################################
# Returns a description for the specified drive type.
#
# Parameters:
#     driveType - The numeric drive type
#
# Returns:
#     The description associated with the numeric drive type.
#
############################################################################################

def driveTypeToDescription(driveType):

	description = "Unknown"

	if (driveType is not None):
		if (driveType == DRIVE_TYPE_UNKNOWN):
			description = "Unknown"
		elif (driveType == DRIVE_TYPE_NO_ROOT_DIRECTORY):
			description = "No Root Directory"
		elif (driveType == DRIVE_TYPE_REMOVABLE_DISK):
			description = "Removable Disk"
		elif (driveType == DRIVE_TYPE_LOCAL_DISK):
			description = "Local Disk"
		elif (driveType == DRIVE_TYPE_NETWORK_DRIVE):
			description = "Network Drive"
		elif (driveType == DRIVE_TYPE_COMPACT_DISC):
			description = "Compact Disc"
		elif (driveType == DRIVE_TYPE_RAM_DISK):
			description = "RAM Disk"

	return description

############################################################################################
# Shows some basic information about the specified disks to assist with troubleshooting.
#
# Parameters:
#     logicalDisks - The list of logical disks on the system
#
############################################################################################

def showLogicalDisks(logicalDisks):

	volumeNum = 0

        print "%-8s %-3s %-15s %-15s %-10s %-15s %-10s" % ("", "", "", "Drive", "Interface", "", "")
        print "%-8s %-3s %-15s %-15s %-10s %-15s %-10s" % ("Volume #", "Ltr", "Label", "Type", "Type", "Size", "Serial Number")
        print "%-8s %-3s %-15s %-15s %-10s %-15s %-10s" % ("--------", "---", "---------------", "---------------", "----------", "---------------", "----------")

	for logicalDisk in logicalDisks:
		if (logicalDisk.getDriveLetter() is not None):
			driveLetter = logicalDisk.getDriveLetter()
		else:
			driveLetter = ""

		if (logicalDisk.getLabel() is not None):
			label = logicalDisk.getLabel()
		else:
			label = ""

		if (logicalDisk.getInterfaceType() is not None):
			interfaceType = logicalDisk.getInterfaceType()
		else:
			interfaceType = ""

		if (logicalDisk.getSize() is not None):
			size = logicalDisk.getSize()
		else:
			size = ""

		if (logicalDisk.getSerialNum() is not None):
			serialNum = logicalDisk.getSerialNum()
		else:
			serialNum = ""

		print "%-8s %-3s %-15s %-15s %-10s %15s %-10s" % (volumeNum, driveLetter, label, driveTypeToDescription(logicalDisk.getDriveType()), interfaceType, size, serialNum)

		volumeNum += 1

############################################################################################
# Returns a list of the logical disks on the system.  Network drives and WinPE (drive "X:")
# are not included in the list because they must not be remapped.
############################################################################################

def getLogicalDisks():
	
	# The list of logical disks that we need to remap.
	logicalDisks = []	

	# The drive letters that are in use by a network drive or WinPE.  When we remap the	
	# disks to a new drive letter, these drive letters will not used during the	
	# remapping, since they are already in use.
	driveLettersInUse = []	

	strComputer = "." 
	objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator") 
	objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2") 
	colItems= objSWbemServices.ExecQuery("Select * from Win32_LogicalDisk")	

	# Create a list of the logical drives, but skip the network drives and the "X:"
	# drive, since that is reserved for WinPE.  The drive letters for any drives
	# we skip will be stored in the "driveLettersInUse" list, so that we know
	# that we can't use those letters when we are remapping the drives.
	for objItem in colItems:
		if (objItem.Caption is None) or (len(objItem.Caption.strip()) == 0):
			# We are only interested in remapping drives that are already
			# mapped to a drive letter. It doesn't seem that our query
			# to Win32_LogicalDisk returns any logical disks that don't
			# have a drive letter assigned anyway, but we test for it
			# just as a precaution.
			print "Skipping drive with label '%s' because it's not mapped to a drive letter" % objItem.VolumeName
		elif (objItem.Caption == "X:"):
			print "Skipping drive '%s' which is reserved for WinPE" % objItem.Caption
			driveLettersInUse.append(objItem.Caption.replace(":", ""))
		elif (objItem.driveType == DRIVE_TYPE_NETWORK_DRIVE):
			print "Skipping drive '%s' which is a network drive" % objItem.Caption
			driveLettersInUse.append(objItem.Caption.replace(":", ""))	
		else:
			logicalDisk = MyDisk()
			logicalDisk.setDriveLetter(objItem.Caption)
			logicalDisk.setLabel(objItem.VolumeName)
			logicalDisk.setDriveType(objItem.DriveType)
			logicalDisk.setSize(objItem.Size)
			logicalDisk.setSerialNum(objItem.VolumeSerialNumber)

			# Get the interface type as reported by the "diskpart"
			# utility. The interface type is needed to help us identify
			# the VID drives, which show up with an interface type of
			# "USB".
			interfaceType = getInterfaceTypeFromDriveLetter(logicalDisk.getDriveLetter().replace(":", ""))
			logicalDisk.setInterfaceType(interfaceType)

			# Get the volume name that's mapped to the specified
			# drive letter.
			volumeName = getVolumeNameFromDriveLetter(logicalDisk.getDriveLetter());
			logicalDisk.setVolumeName(volumeName)

			logicalDisks.append(logicalDisk)

   	return logicalDisks, driveLettersInUse

############################################################################################
# Returns the "diskpart" volume number associated with the specified drive letter.
#
# Parameters:
#     driveLetter - The drive letter
#
############################################################################################

def getVolumeNumFromDriveLetter(driveLetter):

	volumeNumber = None

	diskpartCmd = "list volume\n"

	# Run "diskpart" and list the volumes.
	p = subprocess.Popen(['diskpart'],stdout=PIPE,stderr=STDOUT,stdin=PIPE)

	# Get the stdout/stderr of the command.
	diskpart_stdout = p.communicate(input=diskpartCmd)[0]

	retCode = p.poll()

	p.stdout.close()

	# This regular expression extracts the volume number associated with the drive
	# letter if there's a match. The "(\d+)" is what puts the volume number for the
	# matching drive letter in the variable "result.group(1)".
	pattern = re.compile(r"^\s*Volume\s*(\d+)\s*" + driveLetter + "\s*.*")

	for line in diskpart_stdout.splitlines():
		result = pattern.search(line)

		if result:
			volumeNumber = result.group(1)
			break

	return volumeNumber

############################################################################################
# Returns the volume name associated with the specified drive letter.
#
# Parameters:
#     driveLetter - The drive letter
#
############################################################################################

def getVolumeNameFromDriveLetter(driveLetter):

	volumeName = None

	mountPoint = driveLetter + "\\"

	# Use the "mountvol" command to list the volume name for the specified mount point.
	p = subprocess.Popen (["mountvol", mountPoint, "/L"], stdout=subprocess.PIPE, stderr=STDOUT)
	mountvol_stdout = p.communicate()[0].strip()

	retCode = p.poll()

	p.stdout.close()

	if (retCode != 0):
		raise ShowErrorMessage("An error occurred while executing 'mountvol %s %s' : %s" % (mountPoint, "\L", mountvol_stdout))
	else:
		volumeName = mountvol_stdout

	return volumeName

############################################################################################
# Returns the interface type (e.g. "USB", "FIBRE", "RAID", etc) associated with the
# specified drive letter.  We have to first map the drive letter to the volume number as
# reported by "diskpart".  Once we have the volume number, we can select the volume in
# "diskpart" and tell it to give us the details for the disk.  The details will report the
# interface type in the "Type :" field, so we must parse the output of the details and
# extract the value from the "Type :" field.
#
# Parameters:
#     driveLetter - The drive letter
#
############################################################################################

def getInterfaceTypeFromDriveLetter(driveLetter):

	driveType = None

	# Get the volume number, as reported by "diskpart", that's associated with the
	# drive letter.
	volumeNum = getVolumeNumFromDriveLetter(driveLetter)

	if (volumeNum is not None):
		# Tell "diskpart" to give us the details for the disk associated with the
		# specified volume number.  The details contain a "Type :" field that has
		# the interface type of the disk.
		diskpartCmd = "select volume " + str(volumeNum) + "\n" + "detail disk" + "\n"

		p = subprocess.Popen(['diskpart'],stdout=PIPE,stderr=STDOUT,stdin=PIPE)

		# Get the stdout/stderr of the command.
		diskpart_stdout = p.communicate(input=diskpartCmd)[0]

		retCode = p.poll()

		p.stdout.close()

		# This regular expression extracts the interface type from the "Type :"
		# field, if there's a match. The "(.+)" is what puts the interface type
		# in the variable "result.group(1)".
		pattern = re.compile(r"^\s*Type\s*:\s*(.+)\s*$")

		for line in diskpart_stdout.splitlines():
			result = pattern.search(line)

			if result:
				driveType = result.group(1)
				break

	return driveType

############################################################################################
# Moves any USB drives to the end of the list of logical disks.
#
# Parameters:
#     logicalDisks - The list of logical disks on the system
#
############################################################################################

def moveUsbDrivesToEndOfList(logicalDisks):

        reorderedLogicalDisks = []

	usbDisks = []

	# Remove any VID disks from the logical disk list.
        for logicalDisk in logicalDisks:
		if (logicalDisk.getInterfaceType() == "USB"):
			 # Append the disk to the USB list.
			usbDisks.append(logicalDisk)
		else:
			# Append the disk to the reordered logical disk list.
			reorderedLogicalDisks.append(logicalDisk)

	# Put back the USB disks at the end of the reordered logical disk list.
	for usbDisk in usbDisks:
		reorderedLogicalDisks.append(usbDisk)

        return reorderedLogicalDisks

############################################################################################
# Assigns drive letters to the unmapped disks.
#
# Parameters:
#    unmappedDisks - The disks that are not mapped to a drive letter.
#    reservedDriveLetters - A list of drive letters that are in use or resevered, so that we
#                           don't try to assign one of those drive letters to an unmapped
#                           disk.
############################################################################################

def assignDriveLetters(unmappedDisks, reservedDriveLetters):

 	print "Assigning drive letters"

	print "The following drive letters are reserved or in use : " + ','.join(reservedDriveLetters)

        volumeNum = 0

	for disk in unmappedDisks:
               # Only map a drive letter to a local disk.  Disks on a SAN should be identified
                # as local disks.
                if (disk.getDriveType() == DRIVE_TYPE_LOCAL_DISK):
			# Get a drive letter that's not reserved or is already in use by another disk.
			driveLetter = getNextDriveLetter()
			while ((driveLetter is not None) and (driveLetter in reservedDriveLetters)):
				print "Drive letter '%s' is reserved or is in use.  Trying next drive letter." % driveLetter
				driveLetter = getNextDriveLetter()

			# Map the disk to the drive letter.
			if (driveLetter is not None):
				mountPoint = driveLetter + ":\\"
				print "Remapping volume '%s' as drive letter '%s'" % (disk.getVolumeName(),driveLetter)

				p = subprocess.Popen (["mountvol", mountPoint, disk.getVolumeName()], stdout=subprocess.PIPE, stderr=STDOUT)

				# Get the stdout/stderr of the command.
				mountvol_stdout = p.communicate()[0]

				retCode = p.poll()

				p.stdout.close()

				if (retCode != 0):
					print "AN ERROR OCCURRED"
					raise ShowErrorMessage("An error occurred while executing 'mountvol %s %s' : %s" % (mountPoint, disk.getVolumeName(), mountvol_stdout))
				else:
					# Update the drive letter. This is done so we
					# can display the new drive letter assignments
					# when we're done with the remapping.
					disk.setDriveLetter(driveLetter)
			else:
				raise ShowErrorMessage("No more drive letters to assign to volume '%s'" % disk.getVolumeName())
                else:
			# Clear the drive letter, since we're not going to remap this drive.
			# This is done so that when we display the remapped drives, we can
			# see that this drive wasn't mapped to a letter.
			disk.setDriveLetter(None)

                        print "Not remapping volume '%s' because its drive type is '%s'" % (disk.getVolumeName(),driveTypeToDescription(disk.getDriveType()))

		volumeNum += 1

############################################################################################
# Remove the drive letters from the specified list of disks.
#
# Parameters:
#     logicalDisks - The list of logical disks on the system
#
############################################################################################

def removeDriveLetters(logicalDisks):

 	print "Removing drive letters"

	for disk in logicalDisks:
		mountPoint = disk.getDriveLetter() + "\\"

		print "Removing mount point '%s' for volume '%s'" % (mountPoint,disk.getVolumeName())

		# Remove the volume mount point, effectively removing the drive letter from
		# the volume. 
		p = subprocess.Popen (["mountvol", mountPoint, "/D"], stdout=subprocess.PIPE, stderr=STDOUT)
		mountvol_stdout = p.communicate()[0].strip()

		retCode = p.poll()

		p.stdout.close()

		if (retCode != 0):
			print "AN ERROR OCCURRED"
			raise ShowErrorMessage("An error occurred while executing 'mountvol %s %s' : %s" % (mountPoint, "\D", mountvol_stdout))

############################################################################################
# Remaps the specific disks so that their drive letters begin with "C:", "D:", "E:", etc.
#
# Parameters:
#    logicalDisks - The list of disks that are to be remapped.
#    reservedDriveLetters - A list of drive letters that are in use or resevered, so that we
#                           don't try to assign one of those drive letters to an unmapped
#                           disk.
############################################################################################

def remapDrives(logicalDisks, reservedDriveLetters):

	removeDriveLetters(logicalDisks)

	assignDriveLetters(logicalDisks, reservedDriveLetters)

############################################################################################
# The main function.
############################################################################################

def main(argv):

	reservedDriveLetters = []

	try:
        	args_parser = CustomParser()
        	options, remaining_args = args_parser.parse_args(sys.argv[1:])

		if (options.reservedDriveLetters is not None):
			# Remove any occurrence of ":", since the SystemDrive custom
			# attribute may be used in the parameter and it contains a ":"
			# after the drive letter.
			tempDriveLetters = options.reservedDriveLetters.replace(':', '')

			# Collapse multiple spaces between the letters into a single space,
			# then split the string and create a list of drive letters.
			rex = re.compile(r'\W+')	
			tempDriveLetters = rex.sub(' ', tempDriveLetters)

			reservedDriveLetters = rex.sub(' ', tempDriveLetters).split(' ')

		logicalDisks, driveLettersInUse = getLogicalDisks()

		# Add the drive letters assigned to network drives and WinPE to the list
		# of reserved letters.
		reservedDriveLetters.extend(driveLettersInUse)

		# Convert drive letters to uppercase.
		reservedDriveLetters = [x.upper() for x in reservedDriveLetters]

		print "Disks before remapping"

		showLogicalDisks(logicalDisks)

		logicalDisks = moveUsbDrivesToEndOfList(logicalDisks)

		remapDrives(logicalDisks, reservedDriveLetters)

		print "Disks after remapping"

		showLogicalDisks(logicalDisks)
	except (ShowErrorMessage), why:
		LOG.exception(why)
		sys.stderr.write("Failed to remap Windows drives: %s\n" % why)
		return 1

if __name__ == "__main__":
	sys.exit(main(sys.argv))